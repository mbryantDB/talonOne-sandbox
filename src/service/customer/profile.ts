import { integrationApi } from '../../client/integration'
import { handleData } from '../../util/handleData'
import config from '../../util/config'

export default class CustomerProfileService {
  async createOrUpdateProfile(
    customerId: string,
    customerProfile: any
  ): Promise<any> {
    const opts = {
      runRuleEngine: true, // Boolean | Indicates whether to run the Rule Engine.  If `true`, the response includes: - The effects generated by the triggered campaigns are returned in the `effects` property. - The created coupons and referral objects.  If `false`: - The rules are not executed and the `effects` property is always empty. - The response time improves. - You cannot use `responseContent` in the body.
      dry: config.DRY_RUN, // Boolean | (Only works when `runRuleEngine=true`) Indicates whether to persist the changes. Changes are ignored when `dry=true`.  When set to `true`, you can use the `evaluableCampaignIds` body property to select specific campaigns to run.
    }

    return integrationApi
      .updateCustomerProfileV2(customerId, customerProfile, opts)
      .then(handleData)
  }

  async getCustomerData(customerId: string): Promise<any> {
    const opts = {
      runRuleEngine: true, // Boolean | Indicates whether to run the Rule Engine.  If `true`, the response includes: - The effects generated by the triggered campaigns are returned in the `effects` property. - The created coupons and referral objects.  If `false`: - The rules are not executed and the `effects` property is always empty. - The response time improves. - You cannot use `responseContent` in the body.
      dry: config.DRY_RUN, // Boolean | (Only works when `runRuleEngine=true`) Indicates whether to persist the changes. Changes are ignored when `dry=true`.  When set to `true`, you can use the `evaluableCampaignIds` body property to select specific campaigns to run.
    }

    // Suggested over using management API to get customers
    // Management API also has a request limit of 3 per second
    //
    // Ref: ManagementApi.getCustomerProfile
    return integrationApi
      .updateCustomerProfileV2(customerId, {
        responseContent: [
          "customerProfile"
        ]
      }, opts)
      .then(handleData)
  }
}
